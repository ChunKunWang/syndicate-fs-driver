#!/usr/bin/env python

"""
   Copyright 2016 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""
Filesystem driver.
Serves files on a remote system through generic fs plugin.
"""

import traceback
import sys
import os
import errno
import time
import threading
import json
import syndicate.util.gateway as gateway
import sgfsdriver.lib.abstractfs as abstractfs

from sgfsdriver.lib.pluginloader import pluginloader

storage_dir = None
fs = None

def _initFS( driver_config, driver_secrets ):
    global fs
    global storage_dir

    if not driver_config.has_key( 'DRIVER_FS_PLUGIN' ):
        gateway.log_error( "No DRIVER_FS_PLUGIN defined" )
        return False

    if not driver_config.has_key( 'DRIVER_FS_PLUGIN_CONFIG' ):
        gateway.log_error( "No DRIVER_FS_PLUGIN_CONFIG defined" )
        return False

    if not driver_config.has_key('STORAGE_DIR'):
        gateway.log_error( "No STORAGE_DIR defined" )
        return False

    storage_dir = driver_config['STORAGE_DIR']
    storage_dir = "/" + storage_dir.strip("/")

    plugin = driver_config['DRIVER_FS_PLUGIN']

    if isinstance( driver_config['DRIVER_FS_PLUGIN_CONFIG'], dict ):
        plugin_config = driver_config['DRIVER_FS_PLUGIN_CONFIG']
    elif isinstance( driver_config['DRIVER_FS_PLUGIN_CONFIG'], basestring ):
        json_plugin_config = driver_config['DRIVER_FS_PLUGIN_CONFIG']
        plugin_config = json.loads( json_plugin_config )

    plugin_config["secrets"] = driver_secrets
    plugin_config["work_root"] = storage_dir

    try:
        loader = pluginloader()
        fs = loader.load( plugin, plugin_config, abstractfs.afsrole.WRITE )

        if not fs:
            gateway.log_error( "No such driver plugin found: %s" % plugin )
            return False

        fs.connect()
    except Exception as e:
        gateway.log_error( "Unable to initialize a driver" )
        gateway.log_error( str( e ) )
        traceback.print_exc()
        return False
    return True

def _shutdownFS():
    global fs
    if fs:
        try:
            fs.close()
        except Exception:
            pass
    fs = None

def _prepareStorageDir( chunk_path ):
    """
    Generate the directories on the path to a given chunk.
    Return 0 on success.
    Return -errno on failure.
    """

    global fs
    global storage_dir

    if not fs.exists( "/" ):
        gateway.log_error( "No such file or directory: %s" % storage_dir )
        return -errno.ENOENT

    if not fs.is_dir( "/" ):
        gateway.log_error( "Not a directory: %s" % storage_dir )
        return -errno.ENOTDIR

    chunk_parent_path = os.path.dirname( chunk_path )

    if not fs.exists( chunk_parent_path ):
        fs.make_dirs( chunk_parent_path )

    return 0

def read_chunk( chunk_request, outfile, config, secrets ):
    if not _initFS( config, secrets ):
        gateway.log_error("Unable to init filesystem")
        return -errno.EIO

    chunk_path = gateway.request_to_storage_path( chunk_request )
    rc = _prepareStorageDir( chunk_path )
    if rc != 0:
        gateway.log_error("WARN: could not make or load storage directory for '%s'" % chunk_path)
        return rc

    if not fs.exists( chunk_path ):
        gateway.log_error("WARN: '%s' does not exist" % chunk_path)
        return -errno.ENOENT

    try:
        outfile.write( fs.read( chunk_path, 0, sys.maxint ) )
    except Exception:
        gateway.log_error(traceback.format_exc())
        return -errno.EIO
    return 0

def write_chunk( chunk_request, chunk_buf, config, secrets ):
    if not _initFS( config, secrets ):
        gateway.log_error("Unable to init filesystem")
        return -errno.EIO

    chunk_path = gateway.request_to_storage_path( chunk_request )
    rc = _prepareStorageDir( chunk_path )
    if rc != 0:
        gateway.log_error("WARN: could not make or load storage directory for '%s'" % chunk_path)
        return rc

    try:
        fs.write( chunk_path, chunk_buf )
    except Exception:
        gateway.log_error(traceback.format_exc())
        return -errno.EIO
    return 0


def delete_chunk( chunk_request, config, secrets ):
    if not _initFS( config, secrets ):
        gateway.log_error("Unable to init filesystem")
        return -errno.EIO

    chunk_path = gateway.request_to_storage_path( chunk_request )
    rc = _prepareStorageDir( chunk_path )
    if rc != 0:
        gateway.log_error("WARN: could not make or load storage directory for '%s'" % chunk_path )
        return rc

    if not fs.exists( chunk_path ):
        gateway.log_error("WARN: '%s' does not exist" % chunk_path)
        return 0

    try:
        fs.unlink( chunk_path )
    except Exception:
        gateway.log_error(traceback.format_exc())
        return -errno.EIO
    return 0
